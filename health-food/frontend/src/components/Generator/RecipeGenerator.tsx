import { useRef, useEffect, useState } from 'react';
import { useAppDispatch, useAppSelector } from '../../store/hooks';
import { fetchRecommendations, setCurrentMeal, setGeneratorMode, setPlanItem } from '../../store/slices/appSlice';
import type { PlanItem } from '../../store/slices/appSlice';
import RecipeCard from '../UI/RecipeCard';
import { AICard } from './AICard';
import MyRecipesModal from './MyRecipesModal';

const RecipeGenerator = () => {
    const dispatch = useAppDispatch();
    const containerRef = useRef<HTMLDivElement>(null);
    const [isRecipesModalOpen, setRecipesModalOpen] = useState(false);

    const currentMeal = useAppSelector(state => state.app.currentMeal);
    const { mode, isLoading, results, error } = useAppSelector(state => state.app.generator);
    
    useEffect(() => {
        if (currentMeal && containerRef.current) {
            containerRef.current.scrollIntoView({ behavior: 'smooth', block: 'start' });
        }
    }, [currentMeal]);

    const mealNameMap = {
        breakfast: '–∑–∞–≤—Ç—Ä–∞–∫',
        lunch: '–æ–±–µ–¥',
        dinner: '—É–∂–∏–Ω',
    };

    const handleClose = () => {
        dispatch(setCurrentMeal(null));
    };

    const handleModeSelect = (selectedMode: 'diy' | 'restaurants') => {
        dispatch(setGeneratorMode(selectedMode));
        dispatch(fetchRecommendations(selectedMode));
    };

    const handleAddToPlan = (item: PlanItem) => {
        if(currentMeal && mode) {
            dispatch(setPlanItem({ meal: currentMeal, item, mode }));
            handleClose();
        }
    }

    if (!currentMeal) {
        return null;
    }

    return (
        <>
            <div className="step-card" id="generator-section" ref={containerRef}>
                <div className="step-header">
                    <div className="step-number" id="generator-icon">üßë‚Äçüç≥</div>
                    <div className="step-info">
                        <h2 id="generator-title">–ü–æ–¥–±–æ—Ä –±–ª—é–¥ –Ω–∞ {mealNameMap[currentMeal]}</h2>
                        <p>–í—ã–±–µ—Ä–∏—Ç–µ, —Ö–æ—Ç–∏—Ç–µ –ª–∏ –≤—ã –≥–æ—Ç–æ–≤–∏—Ç—å —Å–∞–º–∏ –∏–ª–∏ –Ω–∞–π—Ç–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –±–ª—é–¥–∞ –≤ –∑–∞–≤–µ–¥–µ–Ω–∏—è—Ö –ø–æ–±–ª–∏–∑–æ—Å—Ç–∏.</p>
                    </div>
                    <button className="close-btn" id="close-generator-btn" title="–ó–∞–∫—Ä—ã—Ç—å –ø–æ–¥–±–æ—Ä" onClick={handleClose}>&times;</button>
                </div>
                <div className="options-grid">
                    <button className={`option-card ${mode === 'diy' ? 'primary' : ''}`} onClick={() => handleModeSelect('diy')}>
                        <span className="option-icon">üßë‚Äçüç≥</span>
                        <div className="option-content">
                            <h3>–°–¥–µ–ª–∞—Ç—å —Å–∞–º–æ–º—É</h3>
                            <p>–ü–æ–ª—É—á–∏—Ç–µ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ—Ü–µ–ø—Ç—ã —Å –ø–æ—à–∞–≥–æ–≤—ã–º–∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º–∏.</p>
                        </div>
                    </button>
                    <button className="option-card" onClick={() => setRecipesModalOpen(true)}>
                        <span className="option-icon">ü•°</span>
                        <div className="option-content">
                            <h3>–ú–æ–∏ —Ä–µ—Ü–µ–ø—Ç—ã</h3>
                            <p>–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ —Ä–µ—Ü–µ–ø—Ç—ã.</p>
                        </div>
                    </button>
                </div>
                
                <div className="results-section" id="resultsWrap">
                    {isLoading && <div className="loader"></div>}
                    {error && <p className="error">{error}</p>}
                    {!isLoading && !error && (
                        <div id="result" className="results-grid-diy">
                            {mode === 'diy' && <AICard />}
                            {results.length === 0 && !mode ? (
                                 <div className="empty-state">
                                    <span className="empty-icon">üçΩÔ∏è</span>
                                    <p>–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏.</p>
                                </div>
                            ) : results.map((item, index) => (
                                <RecipeCard key={index} item={item} onAddToPlan={handleAddToPlan} />
                            ))}
                        </div>
                    )}
                </div>
            </div>
            <MyRecipesModal isOpen={isRecipesModalOpen} onClose={() => setRecipesModalOpen(false)} />
        </>
    );
};

export default RecipeGenerator; 